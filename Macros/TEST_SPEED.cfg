# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro _vars_speed] #work in progress to display loops remaining, nice if you run a big one :)
gcode:
	{% set remaining  = params.i|int %}
	{ action_respond_info("loop: %s" % remaining)  }
	RESPOND MSG="{remaining}"

[gcode_macro TEST_SPEED]

variable_testspeedz: 'False'

	#TEST_SPEED SPEED=450 ACCEL=10000 TESTSPEEDZ=True ITERATIONS=10
	#TEST_SPEED SPEED=450 ACCEL=10000 ITERATIONS=60
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|float %}
	{% set Z_speed  = ZSPEED|default(printer.configfile.settings.printer.max_z_velocity)|float %}

	##need to add printer z velocity ?
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|float %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set testspeedz = params.TESTSPEEDZ|default('False') %}
	SET_GCODE_VARIABLE MACRO=TEST_SPEED VARIABLE=testspeedz VALUE={ testspeedz } ##this is getting passed as a string
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = BOUND|default(40)|int %}
	{% set boundz = BOUND|default(120)|int %}
	{% set boundc = BOUNDC|default(10)|int %}

	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	{% set z_center = (printer.toolhead.axis_minimum.z|float + printer.toolhead.axis_maximum.z|float ) / 2 %}

	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min_constraint = x_center - boundc %}
	{% set x_max_constraint = x_center + boundc %}
	{% set y_min_constraint = y_center - boundc %}
	{% set y_max_constraint = y_center + boundc %}
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	{% set z_min = printer.toolhead.axis_minimum.z + boundz %}
	{% set z_max = printer.toolhead.axis_maximum.z - boundz + 15 + printer.toolhead.axis_minimum.z %}
	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	#M118 Starting retraction test with retract_length: {RETRACT_LENGTH}
	#{ action_respond_info("using speeds: %s" %speed ) }
    #gcmd.respond_info('SET_STEPPER_ENABLE: Invalid stepper "%s"' % (stepper_name,))

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		{% if ( 'True' in testspeedz ) %} #True
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z + 20} F{30 * 60}
		{% elif ( 'False' in testspeedz ) %} #False 
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		{% endif %}
		G4 P1000 
		GET_MCU_POSITION
		#GET_POSITION

	# Go to starting position
	{% if ( 'True' in testspeedz ) %} #True
		G0 X{x_min} Y{y_min} Z{z_min} F{Z_speed * 60} ##need to add printer z velocity
	{% elif ( 'False' in testspeedz ) %} #False 
		G0 X{x_min} Y{y_min} Z{bound + 10} F{Z_speed * 60}
	{% endif %}
	
	{% if ( 'True' in testspeedz ) %} #True if string
		{ action_respond_info("running Z movements.") }
		{% for i in range(iterations) %}
			# Diagonals
			G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
			G0 X{x_max} Y{y_max} Z{z_max} F{speed * 60}
			G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
			G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}
			G0 X{x_min} Y{y_max} Z{z_min} F{speed * 60}
			G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}
			
			# Box
			G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
			G0 X{x_min} Y{y_max} Z{z_max} F{speed * 60}
			G0 X{x_max} Y{y_max} Z{z_min} F{speed * 60}
			G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}


			# Diagonals constraint 
			G0 X{x_min_constraint} Y{y_min_constraint} Z{z_min} F{speed * 60}
			G0 X{x_max_constraint} Y{y_max_constraint} Z{z_max} F{speed * 60}
			G0 X{x_min_constraint} Y{y_min_constraint} Z{z_min} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} Z{z_max} F{speed * 60}
			G0 X{x_min_constraint} Y{y_max_constraint} Z{z_min} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} Z{z_max} F{speed * 60}
			
			# Box constraint
			G0 X{x_min_constraint} Y{y_min_constraint} Z{z_min} F{speed * 60}
			G0 X{x_min_constraint} Y{y_max_constraint} Z{z_max} F{speed * 60}
			G0 X{x_max_constraint} Y{y_max_constraint} Z{z_min} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} Z{z_max} F{speed * 60}

			SET_GCODE_VARIABLE MACRO=_vars_speed VARIABLE=i VALUE={ i }
			_vars_speed
		{% endfor %}
	{% endif %}

	{% if ( 'False' in testspeedz ) %} #False using this as default if it is not defined.
		{ action_respond_info("NOT running Z movements.") }
		{% for i in range(iterations) %}
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed * 60}
			G0 X{x_max} Y{y_max} F{speed * 60}
			G0 X{x_min} Y{y_min} F{speed * 60}
			G0 X{x_max} Y{y_min} F{speed * 60}
			G0 X{x_min} Y{y_max} F{speed * 60}
			G0 X{x_max} Y{y_min} F{speed * 60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed * 60}
			G0 X{x_min} Y{y_max} F{speed * 60}
			G0 X{x_max} Y{y_max} F{speed * 60}
			G0 X{x_max} Y{y_min} F{speed * 60}

			# Diagonals constraint 
			G0 X{x_min_constraint} Y{y_min_constraint} F{speed * 60}
			G0 X{x_max_constraint} Y{y_max_constraint} F{speed * 60}
			G0 X{x_min_constraint} Y{y_min_constraint} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} F{speed * 60}
			G0 X{x_min_constraint} Y{y_max_constraint} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} F{speed * 60}
			
			# Box constraint
			G0 X{x_min_constraint} Y{y_min_constraint} F{speed * 60}
			G0 X{x_min_constraint} Y{y_max_constraint} F{speed * 60}
			G0 X{x_max_constraint} Y{y_max_constraint} F{speed * 60}
			G0 X{x_max_constraint} Y{y_min_constraint} F{speed * 60}
		{% endfor %}
	{% endif %}

	M400
	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		{% if ( 'True' in testspeedz ) %} #True if string
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z + 20} F{30 * 60}
		{% elif ( 'False' in testspeedz ) %} #False 
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		{% endif %}
		G4 P1000
		GET_MCU_POSITION
		#GET_POSITION
		#printer.gcode_move
		#{% set MCU2 = printer.gcode_move['get_position'].MCU["MCU"] %}
		#{% set MCU2 = stepper['GET_MCU_POSITION'].MCU["MCU"] %}

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED